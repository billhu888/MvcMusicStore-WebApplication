@model MvcMusicStore.Models.ShoppingCartItems

@{
    ViewData["Title"]  = "Shopping Cart";
    bool isPost = Convert.ToBoolean(ViewData["isPost"]);
}

<h2> Review Your Cart</h2>
<br />

@*<p>
    @Html.ActionLink("Checkout", "AddressPayment", "Checkout")
</p>*@

<p id="checkoutMessage"></p>
<a href="#" id="checkoutLink">Checkout</a>

<div id="update-message"> </div>
<br />

@if (isPost == false)
{
    <div>
        <table>
            <tr>
                <th>Album Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th></th>
            </tr>
            
            @foreach (var item in Model.CartItems)
            {
                <tr id="row-@item.RecordId">
                    <td> 
                        @Html.ActionLink(item.Album.Title, "Details", "Store", new { AlbumId = item.AlbumId })
                    </td>

                    <td>
                        @item.Album.Price
                    </td>

                    <td id="item-count-@item.RecordId">
                        @item.Count
                    </td>

                    <td>
                        <a href="#" id=@item.AlbumId class="RemoveLink" data-id=@item.RecordId >
                            Remove From Cart
                        </a>
                    </td>
                </tr>
            }

            <tr>
                <td>Total</td>
                <td id="cart-total">
                    @Model.CartTotal
                </td>
                <td id="CartItemCountCart">
                    @Model.CartTotalItems
                </td>
                <td></td>
            </tr>   
        </table>
    </div>

    @*Must have the following 4 things
    1) section
    2) Json converts the 1st character of key to lowercase (case-sensitive too) 
    3) Must call 2nd layer with proprety (message in item.message is 2nd layer)
    4) $.each(data, function(i, item) *@

    @section Scripts  
    {
        <script type="text/javascript">
            $(function () 
            {
                // Function to update "Checkout" link visibility and behavior
                function updateCheckoutLink(cartTotalItems) 
                {
                    var checkoutLink = $("#checkoutLink");
                    var checkoutMessage = $("#checkoutMessage");

                    if (cartTotalItems > 0) 
                    {
                        checkoutLink.attr("href", "/Checkout/AddressPayment");
                        checkoutLink.removeClass("disabled");
                        checkoutMessage.text("");
                    } 
                    else 
                    {
                        checkoutLink.attr("href", "#");
                        checkoutLink.addClass("disabled");
                        checkoutMessage.text("At least 1 item must be in the cart to check out");
                    }
                }

                // Initial update of "Checkout" link based on cartTotalItems
                updateCheckoutLink(@Model.CartTotalItems);

                // Handle click event on "Remove From Cart" links
                $(".RemoveLink").click(function () 
                {
                    var recordToDelete = $(this).data("id");

                    $.post("/ShoppingCart/RemoveFromCartAJAX", { "RecordId": recordToDelete }, function (data) 
                    {
                        $.each(data, function (i, item)
                        {
                            if (item.itemCount === 0) 
                            {
                                $('#row-' + item.deleteId).fadeOut('slow');
                            } 
                            else 
                            {
                                $('#item-count-' + item.deleteId).text(item.itemCount);
                            }

                            $('#cart-total').text(item.cartTotal);
                            $('#update-message').text(item.message);
                            $('#cart-status').text('Cart (' + item.cartCount + ')');
                            $('#CartItemCountCart').text(item.cartCount);
                            $('#CartItemCount').text(' (' + item.cartCount + ')');
                        });

                        // Update "Checkout" link after item removal
                        updateCheckoutLink(data.cartTotalItems);
                    }).fail(function () 
                    {
                        alert("Error removing item from cart.");
                    });
                });

                // Prevent default click behavior for "disabled" Checkout link
                $("#checkoutLink").click(function (e) 
                {
                    if ($(this).hasClass("disabled")) 
                    {
                        e.preventDefault();
                    }
                });
            });
        </script>
    }
}